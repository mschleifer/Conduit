@page "/{usernameTag}"
@using Conduit.Models
@inject PublicClient MyPublicClient
@inject ConduitClient MyConduitClient
@inject NavigationManager MyNavigationManager
@inject AuthenticationStateProvider MyAuthStateProvider

<div class="profile-page">

    <div class="user-info">
        <div class="container">
            <div class="row">

                <div class="col-xs-12 col-md-10 offset-md-1">
                    <img src="@ProfileModel.Image" class="user-img" />
                    <h4>@ProfileModel.Username</h4>
                    <p>
                        @ProfileModel.Bio
                    </p>
                    @if (ProfileModel.Username == AuthState.User.Identity.Name)
                    {
                        <a class="btn btn-sm btn-outline-secondary action-btn" href="/settings">
                            <i class="ion-gear-a"></i> Edit Profile Settings
                        </a>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-outline-secondary action-btn"  @onclick="@(() => ToggleFollowUser(!ProfileModel.Following))">
                            <i class="ion-plus-round"></i>
                            &nbsp;
                            @if (ProfileModel.Following)
                            {
                                <text>Unfollow @ProfileModel.Username</text>

                            }
                            else
                            {
                                <text>Follow @ProfileModel.Username</text>
                            }
                        </button>
                    }
                </div>

            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">

            <div class="col-xs-12 col-md-10 offset-md-1">
                <div class="articles-toggle">
                    <ul class="nav nav-pills outline-active">
                        <li class="nav-item">
                            <a class="nav-link @(IsFavoritedArticlesSelected ? "" : "active")" href="/@UsernameTag" @onclick="@(() => ToggleFavoritedArticles(false))">My Articles</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(IsFavoritedArticlesSelected ? "active" : "")" href="/@UsernameTag" @onclick="@(() => ToggleFavoritedArticles(true))">Favorited Articles</a>
                        </li>
                    </ul>
                </div>

                @*TODO: ArticleList component pageable by size 5 or 10*@
                @if (ArticleList == null)
                {
                    <div class="article-preview">
                        Loading articles...
                    </div>
                }
                else if (ArticleList.Any())
                {
                    @foreach (var article in ArticleList)
                    {
                        <ArticlePreview ArticleModel="article" />
                    }
                }
                else
                {
                    <div class="article-preview">
                        No articles are here... yet.
                    </div>
                }
            </div>

        </div>
    </div>

</div>

@code {
    [Parameter]
    public string UsernameTag { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    public string Username { get; set; }

    public AuthenticationState AuthState { get; set; }
    public Models.Profile ProfileModel = new Models.Profile();
    public List<Article> ArticleList;

    public bool IsFavoritedArticlesSelected { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        // As of .NET5RC1, Blazor cannot handle routing for "/@{username}" (called a complex segment in .NET routing)
        // Instead this page captures any input after the base URL as a parameter and tests if it matches the what
        // the Profile page is supposed to be. If not a match, redirect the user to Home. This will cause problems if
        // we want to implement another route with a single complex segment (e.g. /{username}-{article}), but that's
        // not part of the spec so we'll do this for now.
        // Set a timeout to prevent DoS attacks when running regex on user input
        var regex = new System.Text.RegularExpressions.Regex("@.+", System.Text.RegularExpressions.RegexOptions.None, TimeSpan.FromSeconds(10));
        if (!regex.IsMatch(UsernameTag))
        {
            MyNavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthStateTask;

        Username = UsernameTag.Substring(1);

        var profileResult = await MyConduitClient.GetProfile(Username);

        if (profileResult.Success)
        {
            ProfileModel = profileResult.ReponseObject;
        }
        else
        {
            MyNavigationManager.NavigateTo("/");
        }

        var articleResult = await MyPublicClient.GetArticles(author: Username);
        if (articleResult.Success)
        {
            ArticleList = articleResult.ReponseObject;
        }

    }

    async Task ToggleFavoritedArticles(bool useFavoritedArticles)
    {
        IsFavoritedArticlesSelected = useFavoritedArticles;
        ArticleList = null;
        if (useFavoritedArticles)
        {
            var articleResult = await MyPublicClient.GetArticles(favorited: Username);
            if (articleResult.Success)
            {
                ArticleList = articleResult.ReponseObject;
            }
        }
        else
        {
            var articleResult = await MyPublicClient.GetArticles(author: Username);
            if (articleResult.Success)
            {
                ArticleList = articleResult.ReponseObject;
            }
        }
    }

    async Task ToggleFollowUser(bool shouldFollow)
    {
        if (shouldFollow)
        {
            var followResult = await MyConduitClient.FollowUser(Username);
            if (followResult.Success)
            {
                ProfileModel.Following = true;
            }
        }
        else
        {
            var unfollowResult = await MyConduitClient.UnfollowUser(Username);
            if (unfollowResult.Success)
            {
                ProfileModel.Following = false;
            }
        }
    }
}