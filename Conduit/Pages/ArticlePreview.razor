@inject ConduitClient MyConduitClient

<div class="article-preview">
    <div class="article-meta">
        <a href="/@@@ArticleModel.Author.UserName"><img src="@ArticleModel.Author.Image" /></a>
        <div class="info">
            <a href="/@@@ArticleModel.Author.UserName" class="author">@ArticleModel.Author.UserName</a>
            <span class="date">@ArticleModel.CreatedAt</span>
        </div>
        <button class="btn @(ArticleModel.Favorited ? "btn-primary" : "btn-outline-primary") btn-sm pull-xs-right"
                @onclick="@(() => ToggleFavoriteArticle(!ArticleModel.Favorited, ArticleModel.Slug))">
            <i class="ion-heart"></i> @ArticleModel.FavoritesCount
        </button>
    </div>
    <a href="/article/@ArticleModel.Slug" class="preview-link">
        <h1>@ArticleModel.Title</h1>
        <p>@ArticleModel.Description</p>
        <span>Read more...</span>
        <ul class="tag-list">
            @foreach (var tag in ArticleModel.TagList)
            {
                <li class="tag-default tag-pill tag-outline">
                    @tag
                </li>
            }
        </ul>
    </a>
</div>

@code {
    [Parameter]
    public Conduit.Models.Article ArticleModel { get; set; }

    async Task ToggleFavoriteArticle(bool shouldFavorite, string articleSlug)
    {
        if (shouldFavorite)
        {
            var favoriteResult = await MyConduitClient.FavoriteArticle(articleSlug);
            if (favoriteResult.Success)
            {
                ArticleModel = favoriteResult.ReponseObject;
            }
        }
        else
        {
            var unfavoriteResult = await MyConduitClient.UnfavoriteArticle(articleSlug);
            if (unfavoriteResult.Success)
            {
                ArticleModel = unfavoriteResult.ReponseObject;
            }
        }
    }
}
