@using Conduit.Models
@inject ConduitClient MyConduitClient

<div class="card">
    <div class="card-block">
        <p class="card-text">@CommentModel.Body</p>
    </div>
    <div class="card-footer">
        <a href="/@@@CommentModel.Author.UserName" class="comment-author">
            <img src="@CommentModel.Author.Image" class="comment-author-img" />
        </a>
        &nbsp;
        <a href="" class="comment-author">@CommentModel.Author.UserName</a>
        <span class="date-posted">@CommentModel.CreatedAt</span>
        <AuthorizeView>
            @if (context.User.Identity.Name == CommentModel.Author.UserName)
            {
                <span class="mod-options">
                    <i class="ion-trash-a" @onclick="() => DeleteComment()"></i>
                </span>
            }
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter]
    public Comment CommentModel { get; set; }

    [Parameter]
    public EventCallback<int> OnCommentDelete { get; set; }

    private async Task DeleteComment()
    {
        await OnCommentDelete.InvokeAsync(CommentModel.Id);
    }
}
