@inject ConduitService MyConduitService

<div class="article-meta">
    <a href="/@@@ArticleModel.Author.UserName">
        <img src="@ArticleModel.Author.Image" />
    </a>
    <div class="info">
        <a href="" class="author">@ArticleModel.Author.UserName</a>
        <span class="date">@ArticleModel.CreatedAt.ToString("MMMM d,yyyy")</span>
    </div>
    <AuthorizeView>
        @if (context.User.Identity.Name == ArticleModel.Author.UserName)
        {
            <span>
                <a class="btn btn-outline-secondary btn-sm" href="/editor/@ArticleModel.Slug">
                    <i class="ion-edit"></i>Edit Article
                </a>
                <button class="btn btn-outline-danger btn-sm" @onclick="@(() => DeleteArticle())">
                    <i class="ion-trash-a"></i>Delete Article
                </button>
            </span>
        }
        else
        {
            <span>
                <button class="btn btn-sm @(ArticleModel.Author.Following ? "btn-secondary" : "btn-outline-secondary")" @onclick="@(() => ToggleFollowUser(!ArticleModel.Author.Following))">
                    <i class="ion-plus-round"></i>
                    &nbsp;
                    @(ArticleModel.Author.Following ? "Unfollow" : "Follow") @ArticleModel.Author.UserName
                </button>
                &nbsp;&nbsp;
                <button class="btn btn-sm  @(ArticleModel.Favorited ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => ToggleFavoriteArticle(!ArticleModel.Favorited, ArticleModel.Slug))">
                    <i class="ion-heart"></i>
                    &nbsp;
                    @(ArticleModel.Favorited ? "Unfavorite" : "Favorite") Article <span class="counter">(@ArticleModel.FavoritesCount)</span>
                </button>
            </span>
        }
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public Article ArticleModel { get; set; }

    [Parameter]
    public EventCallback<bool> OnFollowChange { get; set; }

    [Parameter]
    public EventCallback<bool> OnFavoriteChange { get; set; }

    [Parameter]
    public EventCallback<string> OnDeleteArticle { get; set; }


    private async Task ToggleFollowUser(bool shouldFollow)
    {
        if (shouldFollow)
        {
            var followResult = await MyConduitService.FollowUser(ArticleModel.Author.UserName);
            if (followResult.Success)
            {
                ArticleModel.Author.Following = true;
                await OnFollowChange.InvokeAsync(ArticleModel.Author.Following);
            }
            // TODO: what to display on failure?
        }
        else
        {
            var unfollowResult = await MyConduitService.UnfollowUser(ArticleModel.Author.UserName);
            if (unfollowResult.Success)
            {
                ArticleModel.Author.Following = false;
                await OnFollowChange.InvokeAsync(ArticleModel.Author.Following);
            }
            // TODO: what to display on failure?
        }
    }

    private async Task ToggleFavoriteArticle(bool shouldFavorite, string articleSlug)
    {
        if (shouldFavorite)
        {
            var favoriteResult = await MyConduitService.FavoriteArticle(articleSlug);
            if (favoriteResult.Success)
            {
                ArticleModel = favoriteResult.ReponseObject;
                await OnFavoriteChange.InvokeAsync(ArticleModel.Favorited);
            }
            // TODO: what to display on failure?
        }
        else
        {
            var unfavoriteResult = await MyConduitService.UnfavoriteArticle(articleSlug);
            if (unfavoriteResult.Success)
            {
                ArticleModel = unfavoriteResult.ReponseObject;
                await OnFavoriteChange.InvokeAsync(ArticleModel.Favorited);
            }
            // TODO: what to display on failure?
        }
    }

    private async Task DeleteArticle()
    {
        await OnDeleteArticle.InvokeAsync(ArticleModel.Slug);
    }
}
