@page "/Article/{articleSlug}"
@using Conduit.Models
@inject ConduitClient MyConduitClient

<div class="article-page">
    @if (ArticleModel == null)
    {
        <text>Loading article...</text>
    }
    else
    {
        <div class="banner">
            <div class="container">

                <h1>@ArticleModel.Title</h1>

                <ArticleViewActions ArticleModel="ArticleModel"
                                    OnFollowChange="@((param) => HandleOnFollowChange((bool)param))"
                                    OnFavoriteChange="@((param) => HandleOnFavoriteChange((bool)param))"></ArticleViewActions>

            </div>
        </div>

        <div class="container page">

            <div class="row article-content">
                <div class="col-md-12">
                    @ArticleModel.Body
                </div>
            </div>

            <hr />

            <div class="article-actions">
                <ArticleViewActions ArticleModel="ArticleModel"
                                    OnFollowChange="@((param) => HandleOnFollowChange((bool)param))"
                                    OnFavoriteChange="@((param) => HandleOnFavoriteChange((bool)param))"></ArticleViewActions>
            </div>

            <div class="row">

                <div class="col-xs-12 col-md-8 offset-md-2">

                    <form class="card comment-form">
                        <div class="card-block">
                            <textarea class="form-control" placeholder="Write a comment..." rows="3"></textarea>
                        </div>
                        <div class="card-footer">
                            <img src="@CurrentUser.Image" class="comment-author-img" />
                            <button class="btn btn-sm btn-primary">
                                Post Comment
                            </button>
                        </div>
                    </form>

                    @if (Comments == null)
                    {
                        <text>Loading comments...</text>
                    }
                    else
                    {
                        foreach (var comment in Comments)
                        {
                            <div class="card">
                                <div class="card-block">
                                    <p class="card-text">@comment.Body</p>
                                </div>
                                <div class="card-footer">
                                    <a href="" class="comment-author">
                                        <img src="@comment.Author.Image" class="comment-author-img" />
                                    </a>
                                    &nbsp;
                                    <a href="" class="comment-author">@comment.Author.UserName</a>
                                    <span class="date-posted">@comment.CreatedAt</span>
                                    <span class="mod-options">
                                        <i class="ion-trash-a"></i>
                                    </span>
                                </div>
                            </div>
                        }
                    }
                </div>

            </div>

        </div>
    }

</div>

@code {
    [Parameter]
    public string ArticleSlug { get; set; }

    private Article ArticleModel { get; set; }
    private List<Comment> Comments { get; set; }
    private User CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var articleResult = await MyConduitClient.GetArticle(ArticleSlug);

        if (articleResult.Success)
        {
            ArticleModel = articleResult.ReponseObject;
        }

        CurrentUser = await MyConduitClient.GetCurrentUser();

        var commentsResult = await MyConduitClient.GetComments(ArticleSlug);

        if (commentsResult.Success)
        {
            Comments = commentsResult.ReponseObject;
        }
    }

    private async Task HandleOnFollowChange(bool isFollowing)
    {
        await Task.Run(() => ArticleModel.Author.Following = isFollowing);
    }

    private async Task HandleOnFavoriteChange(bool isFavorited)
    {
        await Task.Run(() =>
        {
            ArticleModel.Favorited = isFavorited;
            if (isFavorited) { ArticleModel.FavoritesCount++; } else { ArticleModel.FavoritesCount--; }
        });
    }
} 