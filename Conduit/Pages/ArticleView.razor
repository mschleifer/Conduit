@page "/Article/{articleSlug}"
@using Conduit.Models
@inject ConduitClient MyConduitClient

<div class="article-page">

    <div class="banner">
        <div class="container">
            @if (ArticleModel == null)
            {
                <text>Loading article...</text>
            }
            else
            {
                <h1>@ArticleModel.Title</h1>

                <ArticleViewActions ArticleModel="ArticleModel"
                                    OnFollowChange="@((param) => HandleOnFollowChange((bool)param))"
                                    OnFavoriteChange="@((param) => HandleOnFavoriteChange((bool)param))" />
            }
        </div>
    </div>

    <div class="container page">
        @if (ArticleModel == null)
        {
            <text>Loading article...</text>
        }
        else
        {
            <div class="row article-content">
                <div class="col-md-12">
                    @ArticleModel.Body
                </div>
            </div>

            <hr />

            <div class="article-actions">
                <ArticleViewActions ArticleModel="ArticleModel"
                                    OnFollowChange="@((param) => HandleOnFollowChange((bool)param))"
                                    OnFavoriteChange="@((param) => HandleOnFavoriteChange((bool)param))" />
            </div>

            <div class="row">

                <div class="col-xs-12 col-md-8 offset-md-2">

                    <EditForm Model="@NewCommentModel" OnValidSubmit="@PostComment">
                        <DataAnnotationsValidator />
                        <ServerValidator @ref="ServerValidator" />

                        <div class="error-messages">
                            <ValidationSummary />
                        </div>

                        <div class="card comment-form">
                            <div class="card-block">
                                <InputTextArea @bind-Value="NewCommentModel.Body" class="form-control" placeholder="Write a comment..." rows="3" />
                            </div>
                            <div class="card-footer">
                                <img src="@CurrentUser.Image" class="comment-author-img" />
                                <button class="btn btn-sm btn-primary" disabled="@(IsSubmitting)">
                                    Post Comment
                                </button>
                            </div>
                        </div>
                    </EditForm>

                    @if (Comments == null)
                    {
                        <text>Loading comments...</text>
                    }
                    else
                    {
                        foreach (var comment in Comments)
                        {
                            <ArticleComment CommentModel="comment"
                                            OnCommentDelete="@((param) => HandleOnCommentDelete((int)param))" />
                        }
                    }
                </div>

            </div>
        }

    </div>

</div>

@code {
    [Parameter]
    public string ArticleSlug { get; set; }

    private Article ArticleModel { get; set; }
    private List<Comment> Comments { get; set; }
    private User CurrentUser { get; set; }

    private Comment NewCommentModel = new Comment();
    private bool IsSubmitting { get; set; }
    private ServerValidator ServerValidator;

    protected override async Task OnInitializedAsync()
    {
        var articleResult = await MyConduitClient.GetArticle(ArticleSlug);

        if (articleResult.Success)
        {
            ArticleModel = articleResult.ReponseObject;
        }

        CurrentUser = await MyConduitClient.GetCurrentUser();

        var commentsResult = await MyConduitClient.GetComments(ArticleSlug);

        if (commentsResult.Success)
        {
            Comments = commentsResult.ReponseObject;
        }
    }

    private async Task HandleOnFollowChange(bool isFollowing)
    {
        await Task.Run(() => ArticleModel.Author.Following = isFollowing);
    }

    private async Task HandleOnFavoriteChange(bool isFavorited)
    {
        await Task.Run(() =>
        {
            ArticleModel.Favorited = isFavorited;
            if (isFavorited) { ArticleModel.FavoritesCount++; } else { ArticleModel.FavoritesCount--; }
        });
    }

    private async Task HandleOnCommentDelete(int commentId)
    {
        var deleteResult = await MyConduitClient.DeleteComment(ArticleSlug, commentId);

        if (deleteResult.Success)
        {
            Comments = Comments.Where(x => x.Id != commentId).ToList();
        }
    }

    private async Task PostComment()
    {
        ServerValidator.ClearErrors();

        IsSubmitting = true;

        var loginResult = await MyConduitClient.PostComment(ArticleModel.Slug, NewCommentModel);

        IsSubmitting = false;

        if (loginResult.Success)
        {
            Comments.Add(loginResult.ReponseObject);
        }
        else if (loginResult.Errors?.Any() ?? false)
        {
            ServerValidator.DisplayErrors(loginResult.Errors);
        }
        else
        {
            ServerValidator.DisplayError(string.Empty, "Your request could not be processed");
        }
    }
} 