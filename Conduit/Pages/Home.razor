@page "/"

@inject ConduitService MyConduitService

<div class="home-page">

    <AuthorizeView>
        <NotAuthorized>
            <div class="banner">
                <div class="container">
                    <h1 class="logo-font">conduit</h1>
                    <p>A place to share your knowledge.</p>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="container page">
        <div class="row">
            <div class="col-md-9">
                <div class="feed-toggle">
                    <ul class="nav nav-pills outline-active">
                        <AuthorizeView>
                            <Authorized>
                                <li class="nav-item">
                                    <a class="nav-link @(FeedType == Enums.FeedType.Personal ? "active" : "")" href="" @onclick="@(() => ToggleFeed(Enums.FeedType.Personal))">Your Feed</a>
                                </li>
                            </Authorized>
                        </AuthorizeView>
                        <li class="nav-item">
                            <a class="nav-link @(FeedType == Enums.FeedType.Global ? "active" : "")" href="" @onclick="@(() => ToggleFeed(Enums.FeedType.Global))">Global Feed</a>
                        </li>
                        @if (FeedType == Enums.FeedType.Tag)
                        {
                            <li class="nav-item">
                                <a class="nav-link active" href="">#@SelectedTag</a>
                            </li>
                        }
                    </ul>
                </div>

                <ArticleList Articles="ArticleList"
                             PageCount="(TotalArticleCount - 1) / 10 + 1"
                             CurrentPageIndex="CurrentPageIndex"
                             OnPageChange="@((param) => HandleOnPageChange((int)param))" />
            </div>

            <div class="col-md-3">
                <div class="sidebar">
                    <p>Popular Tags</p>

                    <div class="tag-list">
                        @if (PopularTags == null)
                        {
                            <text>Loading tags...</text>
                        }
                        else
                        {
                            foreach (var tag in PopularTags)
                            {
                                <a href="" class="tag-pill tag-default" @onclick="@(() => ToggleFeed(Enums.FeedType.Tag, tag))">@tag</a>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    private List<Article> ArticleList;
    private int TotalArticleCount { get; set; }
    private int CurrentPageIndex { get; set; }
    private List<string> PopularTags;
    private Enums.FeedType FeedType { get; set; }
    private string SelectedTag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FeedType = (await AuthStateTask).User.Identity.IsAuthenticated ? Enums.FeedType.Personal : Enums.FeedType.Global;

        await ToggleFeed(FeedType);

        var tagsResult = await MyConduitService.GetTags();
        if (tagsResult.Success)
        {
            PopularTags = tagsResult.ReponseObject;
        }
    }

    private async Task ToggleFeed(Enums.FeedType feedType, string tag = null)
    {
        FeedType = feedType;
        ArticleList = null;
        CurrentPageIndex = 0;
        SelectedTag = tag;
        await GetMoreArticles(0);
    }

    private async Task GetMoreArticles(int pageIndex)
    {
        Models.ConduitApiResponse<Models.ArticleList> articleResult = new Models.ConduitApiResponse<Models.ArticleList> { Success = false };

        if (FeedType == Enums.FeedType.Personal)
        {
            articleResult = await MyConduitService.GetFeed(limit: 10, offset: pageIndex * 10);
        }
        else if (FeedType == Enums.FeedType.Global)
        {
            articleResult = await MyConduitService.GetArticles(limit: 10, offset: pageIndex * 10);
        }
        else if (FeedType == Enums.FeedType.Tag)
        {
            articleResult = await MyConduitService.GetArticles(limit: 10, offset: pageIndex * 10, tag: SelectedTag);
        }

        if (articleResult.Success)
        {
            ArticleList = articleResult.ReponseObject.Articles;
            TotalArticleCount = articleResult.ReponseObject.ArticlesCount;
        }
    }

    private async Task HandleOnPageChange(int newPageIndex)
    {
        CurrentPageIndex = newPageIndex;
        await GetMoreArticles(newPageIndex);
    }
}